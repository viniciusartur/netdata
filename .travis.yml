dist: bionic
language: c
services:
  - docker



# This is a hook to help us introduce "soft" errors on our process
matrix:
  allow_failures:
    - env: ALLOW_SOFT_FAILURE_HERE=true

before_install:
  - source .travis/utils.sh

# Install dependencies for all, once
#
install:
  - sudo apt-get install -y libuv1-dev liblz4-dev libjudy-dev libcap2-bin zlib1g-dev uuid-dev fakeroot libipmimonitoring-dev libmnl-dev libnetfilter-acct-dev gnupg python-pip
  - sudo apt install -y --only-upgrade docker-ce
  - sudo pip install git-semver==0.2.4 # 11/Sep/2019: git-semver tip was broken, so we had to force last good run of it
  - docker info
  - source tests/installer/slack.sh
  - export NOTIF_CHANNEL="automation-beta"
  - if [ "${TRAVIS_REPO_SLUG}" = "netdata/netdata" ]; then export NOTIF_CHANNEL="automation"; fi;
  - export BUILD_VERSION="$(cat packaging/version | cut -d'-' -f1)"
  - export LATEST_RELEASE_VERSION="$(cat packaging/version | cut -d'-' -f1)"
  - export LATEST_RELEASE_DATE="$(git log -1 --format=%aD "${LATEST_RELEASE_VERSION}" | cat)"
  - if [[ "${TRAVIS_COMMIT_MESSAGE}" = *"[Build latest]"* ]]; then export BUILD_VERSION="$(cat packaging/version | cut -d'-' -f1,2 | sed -e 's/-/./g').latest"; fi;
  - export DEPLOY_REPO="netdata"  # Default production packaging repository
  - export PACKAGING_USER="netdata" # Standard package cloud account
  - if [[ "${TRAVIS_COMMIT_MESSAGE}" = *"[Build latest]"* ]]; then export DEPLOY_REPO="netdata-edge"; fi;
  - export PACKAGE_CLOUD_RETENTION_DAYS=30
  - if [ ! "${TRAVIS_REPO_SLUG}" = "netdata/netdata" ]; then export DEPLOY_REPO="netdata-devel";  fi;
  # These are release-related artifacts and have to be evaluated before we start doing conditional checks inside stages
  - source ".travis/tagger.sh"
  - export GIT_TAG="$(git tag --points-at)"



# Setup notification system
#
notifications:
  webhooks: https://app.fossa.io/hooks/travisci



# Define the stage sequence and conditionals
#
stages:
  # Mandatory runs, we always want these executed
  - name: Code quality, linting, syntax, code style

jobs:
  include:
    - stage: Code quality, linting, syntax, code style

      name: Run shellchecking on BASH
      script: shellcheck --format=gcc $(find . -name '*.sh.in' -not -iwholename '*.git*')
